openapi: 3.0.0
info:
  title: Migato API
  version: 1.1.0
  description: |
    This is the API documentation for the Migato API.
  
servers:
  - url: '{protocol}://api.migato.com/api/v1/'
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
    description: Production server
  - url: '{protocol}://localhost:{port}/api/v1/'
    description: Local server
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      port: 
        default: "3000"

paths:
  # auth component
  /auth/register:
    description: Register a new user
    post:
      operationId: registerUser
      summary: Register a new user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/AccessToken'
                  user:
                    $ref: '#/components/schemas/User'
                required:
                  - token
                  - user
        '409':
          description: User already exists
          # [`"${duplicateField}" already exists`]
        '500':
          description: Internal server error
  /auth/login:
    description: Login a user
  /auth/refresh-token:
    description: Refresh the JWT token
  /auth/send-password-reset:
    description: Send a password reset email
  /auth/password-reset:
    description: Reset the user password
  /auth/send-email-verification:
    description: Send an email verification email
  /auth/email-verification:
    description: Verify the user email

  # book component
  /book:
    get:
      operationId: getBooks
      summary: Get all books in the database
      parameters:
        - in: query
          name: title
          description: The title of the book
          schema:
            type: string
        - in: query
          name: author
          description: The author of the book
          schema:
            type: string
        - in: query
          name: categories
          description: The categories of the book
          schema:
            type: array
            items:
              type: string
              enum:
                - fiction
                - non-fiction
                - fantasy
                - mystery
                - thriller
                - romance
                - horror
                - scienceFiction
                - historicalFiction
                - biography
                - autobiography
              uniqueItems: true
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '402':
          description: No books found
    post:
      operationId: addBook
      summary: Add a new book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Book added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /book/{id}:
    get:
      operationId: getBookById
      summary: Get a book by ID
      parameters:
        - in: path
          name: id
          description: The ID of the book
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '402':
          description: Book not found
    put:
      operationId: updateBook
      summary: Update a book by ID
      parameters:
        - in: path
          name: id
          description: The ID of the book
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '402':
          description: Book not found
    delete:
      operationId: deleteBook
      summary: Delete a book by ID
      parameters:
        - in: path
          name: id
          description: The ID of the book
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Book deleted successfully
        '402':
          description: Book not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    APIErrorModel:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
        stack:
          type: string
        status:
          type: integer
          default: 500
        isPublic:
          type: boolean
          default: false  
        code:
          type: integer
          minimum: 100
          maximum: 600

    RefreshToken:
      type: object
      properties:
        token:
          type: string
          format: jwt
        userId:
          type: integer
          format: uuid
        expires:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time          
      required:
        - token
        - userId

    AccessToken:
      type: object
      properties:
        token:
          type: string
          format: jwt
        expires:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        subject:
          type: string
          format: uuid
          description: The user ID
          default: this.id
      required:
        - token

    User:
      type: object
      properties:
        id:
          type: integer
          format: uuid
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum:
            - user
            - admin
          default: user
        picture:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - email
        - password

    Book:
      type: object
      properties:
        id:
          type: integer
          format: uuid
        title:
          type: string
          format: uuid
        author:
          type: string
          format: uuid
        publisher:
          type: string
          format: uuid
        categories:
          type: array
          items:
            type: string
            enum:
              - fiction
              - non-fiction
              - fantasy
              - mystery
              - thriller
              - romance
              - horror
              - scienceFiction
              - historicalFiction
              - biography
              - autobiography
          uniqueItems: true
        description:
          type: string
          format: uuid
        pdfUrl:
          type: string
          format: uri
        coverImageUrl:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time