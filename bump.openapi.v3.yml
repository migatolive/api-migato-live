openapi: 3.0.0
info:
  title: Migato API
  version: 1.1.0
  description: |
    This is the API documentation for the Migato API.
  
servers:
  - url: 'https://api.migato.com/api/v1/'
    description: Production server

security:
  - bearerAuth: []

paths:
  # auth component
  /auth/register:
    description: Register a new user
    post:
      operationId: registerUser
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'  
        required: true
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/AccessToken'
                  user:
                    $ref: '#/components/schemas/UserResponse'
                required:
                  - token
                  - user
        '409':
          description: Duplicate field already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'        
  /auth/login:
    description: Login a user
    post:
      operationId: loginUser
      summary: Login a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - email
                - password
        required: true
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    $ref: '#/components/schemas/AccessToken'
                  user:
                    $ref: '#/components/schemas/UserResponse'
                required:
                  - token
                  - user
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCredentialsError'
  /auth/refresh-token:
    description: Refresh access token using refresh token
    post:
      operationId: refreshToken
      summary: Refresh access token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  $ref: '#/components/schemas/RefreshToken'
              required:
                - refreshToken
        required: true
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    $ref: '#/components/schemas/AccessToken'
                  refreshToken:
                    $ref: '#/components/schemas/RefreshToken'
                required:
                  - accessToken
                  - refreshToken
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidRefreshTokenError'
  /auth/send-password-reset:
    description: Send a password reset email
    post:
      operationId: sendPasswordReset
      summary: Send a password reset email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
        required: true
      responses:
        '200':
          description: Password reset email sent successfully
        '401':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailError'
  /auth/password-reset:
    description: Reset the user password
    post:
      operationId: passwordReset
      summary: Reset the user password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  format: jwt
                password:
                  type: string
                  format: password
              required:
                - token
                - password
        required: true
      responses:
        '200':
          description: Password reset successfully
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTokenError'
  /auth/send-email-verification:
    description: Send an email verification email
    post:
      operationId: sendEmailVerification
      summary: Send an email verification email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
        required: true
      responses:
        '200':
          description: Email verification email sent successfully
        '401':
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidEmailError'
    /auth/email-verification:
      description: Verify the user email
      post:
        operationId: emailVerification
        summary: Verify the user email
        requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: jwt
                required:
                  - token
          required: true
        responses:
          '200':
            description: Email verified successfully
          '401':
            description: Invalid token
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/APIErrorModel'
                    - type: object
                      properties:
                        message:
                          type: string
                          example: "Invalid token"
                        errors:
                          type: array
                          items:
                            type: object
                            properties:
                              field:
                                type: string
                                example: "token"
                              message:
                                type: string
                                example: "Invalid token"
                              location:
                                type: string
                                example: "body"
                        status:
                          type: string
                          example: httpStatus.UNAUTHORIZED
                        isPublic:
                          type: boolean
                          example: true
                        code:
                          type: integer
                          example: 401

    # book component
    /book:
      get:
        operationId: getBooks
        summary: Get all books in the database
        parameters:
          - in: query
            name: title
            description: The title of the book
            schema:
              type: string
          - in: query
            name: author
            description: The author of the book
            schema:
              type: string
          - in: query
            name: categories
            description: The categories of the book
            schema:
              type: array
              items:
                type: string
                enum:
                  - fiction
                  - non-fiction
                  - fantasy
                  - mystery
                  - thriller
                  - romance
                  - horror
                  - scienceFiction
                  - historicalFiction
                  - biography
                  - autobiography
                uniqueItems: true
        responses:
          '200':
            description: Books retrieved successfully
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Book'
          '402':
            description: No books found
      post:
        operationId: addBook
        summary: Add a new book
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          required: true
        responses:
          '201':
            description: Book added successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Book'
    /book/{id}:
      get:
        operationId: getBookById
        summary: Get a book by ID
        parameters:
          - in: path
            name: id
            description: The ID of the book
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: Book retrieved successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Book'
          '402':
            description: Book not found
      put:
        operationId: updateBook
        summary: Update a book by ID
        parameters:
          - in: path
            name: id
            description: The ID of the book
            required: true
            schema:
              type: string
              format: uuid
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
          required: true
        responses:
          '200':
            description: Book updated successfully
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Book'
          '402':
            description: Book not found
      delete:
        operationId: deleteBook
        summary: Delete a book by ID
        parameters:
          - in: path
            name: id
            description: The ID of the book
            required: true
            schema:
              type: string
              format: uuid
        responses:
          '200':
            description: Book deleted successfully
          '402':
            description: Book not found
  /auth/email-verification:
    description: Verify the user email
    post:
      operationId: emailVerification
      summary: Verify the user email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  format: jwt
              required:
                - token
              additionalProperties: false
        required: true
      responses:
        '200':
          description: Email verified successfully
        '401':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidTokenError'
  # book component
  /book:
    get:
      operationId: getBooks
      summary: Get all books in the database
      parameters:
        - in: query
          name: title
          description: The title of the book
          example: "Call of Cthulhu"
          schema:
            type: string
        - in: query
          name: author
          description: The author of the book
          example: "Howard Phillips Lovecraft"
          schema:
            type: string
        - in: query
          name: categories
          description: The categories of the book
          schema:
            type: array
            items:
              type: string
              enum:
                - fiction
                - non-fiction
                - fantasy
                - mystery
                - thriller
                - romance
                - horror
                - scienceFiction
                - historicalFiction
                - biography
                - autobiography
            uniqueItems: true
          example: ["fiction", "horror"]
      responses:
        '200':
          description: Books retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        '404':
          description: No books found
    post:
      operationId: addBook
      summary: Add a new book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Book added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /book/{id}:
    get:
      operationId: getBookById
      summary: Get a book by ID
      parameters:
        - in: path
          name: id
          description: The ID of the book
          required: true
          schema:
            type: integer
          example: 12
      responses:
        '200':
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      operationId: updateBook
      summary: Update a book by ID
      parameters:
        - in: path
          name: id
          description: The ID of the book
          required: true
          schema:
            type: integer
          example: 12
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      operationId: deleteBook
      summary: Delete a book by ID
      parameters:
        - in: path
          name: id
          description: The ID of the book
          required: true
          schema:
            type: integer
          example: 12
      responses:
        '200':
          description: Book deleted successfully
        '404':
          description: Book not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    APIErrorModel:
      readOnly: true
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        errors:
          type: array
          maxItems: 100
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
        stack:
          type: string
        status:
          type: integer
          default: 500
        isPublic:
          type: boolean
          default: false  
        code:
          type: integer
          minimum: 100
          maximum: 600
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/APIErrorModel'
        - type: object
          properties:
            message:
              type: string
              example: "Validation Error"
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Email already exists"
                  location:
                    type: string
                    example: "body"
            status:
              type: string
              example: "409"
            isPublic:
              type: boolean
              example: true
            code:
              type: integer
              example: 409
          additionalProperties: false
    InvalidCredentialsError:
        allOf:
          - $ref: '#/components/schemas/APIErrorModel'
          - type: object
            properties:
              message:
                type: string
                example: "Invalid credentials"
              errors:
                type: array
                maxItems: 100
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "email"
                    message:
                      type: string
                      example: "Invalid credentials"
                    location:
                      type: string
                      example: "body"
              status:
                type: string
                example: "401"
              isPublic:
                type: boolean
                example: true
              code:
                type: integer
                example: 401
            additionalProperties: false
    InvalidRefreshTokenError:
      allOf:
        - $ref: '#/components/schemas/APIErrorModel'
        - type: object
          properties:
            message:
              type: string
              example: "Invalid or expired refresh token"
            status:
              type: string
              example: "401"
            code:
              type: integer
              example: 401
          additionalProperties: false
    InvalidTokenError:
      allOf:
        - $ref: '#/components/schemas/APIErrorModel'
        - type: object
          properties:
            message:
              type: string
              example: "Invalid token"
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "token"
                  message:
                    type: string
                    example: "Invalid token"
                  location:
                    type: string
                    example: "body"
            status:
              type: string
              example: "401"
            isPublic:
              type: boolean
              example: true
            code:
              type: integer
              example: 401
          additionalProperties: false
    InvalidEmailError:
      allOf:
        - $ref: '#/components/schemas/APIErrorModel'
        - type: object
          properties:
            message:
              type: string
              example: "Invalid email"
            errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: "email"
                  message:
                    type: string
                    example: "Invalid email"
                  location:
                    type: string
                    example: "body"
            status:
              type: string
              example: "401"
            isPublic:
              type: boolean
              example: true
            code:
              type: integer
              example: 401    
          additionalProperties: false
    RefreshToken:
      type: object
      properties:
        token:
          type: string
          format: jwt
        userId:
          type: string
          format: uuid
          readOnly: true
        expires:
          type: string
          format: date-time
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time     
          readOnly: true     
      required:
        - token
    AccessToken:
      type: object
      properties:
        token:
          type: string
          format: jwt
        expires:
          type: string
          format: date-time
          readOnly: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        subject:
          type: integer
          description: The user ID
          readOnly: true
      required:
        - token
    UserResponse:
      type: object
      readOnly: true
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        role:
          type: string
          enum:
            - user
            - admin
          default: user
        picture:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
          format: uuid
        author:
          type: string
          format: uuid
        publisher:
          type: string
          format: uuid
        categories:
          type: array
          uniqueItems: true
          maxItems: 20
          items:
            type: string
            enum:
              - fiction
              - non-fiction
              - fantasy
              - mystery
              - thriller
              - romance
              - horror
              - scienceFiction
              - historicalFiction
              - biography
              - autobiography
        description:
          type: string
          format: uuid
        pdfUrl:
          type: string
          format: uri
        coverImageUrl:
          type: string
          format: uri
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true